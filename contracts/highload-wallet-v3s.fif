/*
  highload-wallet-v3s â€“ open-source optimized highload wallet for tvm-based blockchains (s - safest vesrion)

  Copyright (C) 2023 Continuation Team

  This file is part of highload-wallet-v3.

  highload-wallet-v3 is free software: you can redistribute it and/or modify it under the terms
  of the GNU Lesser General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  highload-wallet-v3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License along with highload-wallet-v3.
  If not, see <https://www.gnu.org/licenses/>.
*/

"Asm.fif" include

{ $>B crc16 0xffff and 0x10000 or } : $>method_id

<{
    SETCP0 DUP                                                 // ... selector selector
    <{                                                         // in_msg_full in_msg_body selector
        DROP                                                   // in_msg_full in_msg_body
        DUP SBITREFS                                           // in_msg_full in_msg_body body_bits body_refs
        1 EQINT SWAP 32 64 + EQINT AND                         // in_msg_full in_msg_body f
        IFNOTRET                                               // in_msg_full in_msg_body
        SWAP                                                   // in_msg_body in_msg_full
        CTOS 4 LDU LDMSGADDR DROP                              // in_msg_body flags sender
        SWAP ONE AND                                           // in_msg_body sender bounced?
        IFRET                                                  // in_msg_body sender
        MYADDR SDEQ IFNOTRET                                   // in_msg_body
        x{ae42e5a4} SDBEGINSQ IFNOTRET                         // in_msg_body'
        64 LDU NIP                                             // in_msg_body'
        PLDREF                                                 // in_msg_body' actions
        c5 POP                                                 // in_msg_body'
    }>c
    IFNOTJMPREF
    DUP ISPOS                                                  // ... selector f
    <{                                                         // ... selector
        DUP                                                    // ... selector selector
        "get_public_key" $>method_id EQINT                     // ... selector f
        IFJMP:<{                                               // ... selector
            c4 PUSH CTOS 256 PLDU                              // ... selector pubkey
            // return pubkey
            1 RETARGS
        }>
        "get_subwallet_id" $>method_id EQINT                   // ... f
        IFJMP:<{                                               // ...
            c4 PUSH CTOS 256 LDU                               // ... pubkey
            32 PLDU                                            // ... pubkey subwallet_id
            // return subwallet_id
            1 RETARGS
        }>
        // TODO: get_timeout, get_last_cleaned, processed?
        0x7ff THROW
    }>c
    IFJMPREF
    // fail unless recv_external (from wallet-v3)
    INC 32 THROWIF                                             // msg_body

    // parse msg_body
    LDREF 9 PUSHPOW2 LDSLICEX ENDS OVER HASHCU                 // msg_inner sign hash

    // parse storage
    c4 PUSH                                                    // msg_inner sign hash c4
    CTOS 256 LDU 32 LDU LDDICT LDDICT 40 PLDU                  // msg_inner sign hash pubkey subwallet_id old_queries queries last_cleaned

    // check and shift query dicts
    DUP NOW 128 SUBCONST LESS                                  // msg_inner sign hash pubkey subwallet_id old_queries queries last_cleaned f
    IF:<{                                                      // msg_inner sign hash pubkey subwallet_id old_queries queries last_cleaned
        1 2 BLKDROP2                                           // msg_inner sign hash pubkey subwallet_id queries->old_queries last_cleaned
        NOW 8 PUSHPOW2 SUB LESS                                // msg_inner sign hash pubkey subwallet_id old_queries f
        IF:<{                                                  // msg_inner sign hash pubkey subwallet_id old_queries
            DROP                                               // msg_inner sign hash pubkey subwallet_id
            NULL                                               // msg_inner sign hash pubkey subwallet_id old_queries
        }>
        NULL NOW                                               // msg_inner sign hash pubkey subwallet_id old_queries queries last_cleaned
    }>

    // check sign
    s7 s5 s6 XCHG3                                             // old_queries last_cleaned queries pubkey subwallet_id msg_inner hash sign
    s4 PUSH                                                    // old_queries last_cleaned queries pubkey subwallet_id msg_inner hash sign pubkey
    CHKSIGNU 33 THROWIFNOT                                     // old_queries last_cleaned queries pubkey subwallet_id msg_inner

    // parse msg_inner
    CTOS LDREF 8 LDU 14 LDU 10 LDU 40 LDU 32 LDU ENDS          // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number created_at msg_subwallet_id

    // check subwallet_id
    s6 PUSH EQUAL 34 THROWIFNOT                                // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number created_at

    // check created_at
    NOW 2DUP 128 SUBCONST MAX MIN EQUAL 35 THROWIFNOT          // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number

    // check query_id in old_queries
    s1 s8 PUSH2 14 INT DICTUGETREF                             // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number (value_cell -1 or 0)
    IF:<{                                                      // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number value_cell
        CTOS OVER SDSKIPFIRST SDFIRST 36 THROWIF               // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number
    }>

    // check query_id in queries
    // and write, if not found
    s1 s6 PUSH2 14 INT DICTUGETREF                             // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number (value_cell -1 or 0)
    IF:<{                                                      // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number value_cell
        CTOS SWAP LDSLICEX                                     // old_queries last_cleaned queries pubkey subwallet_id message mode shift value' value''
        b{0} SDBEGINS                                          // old_queries last_cleaned queries pubkey subwallet_id message mode shift value' value''
        SWAP                                                   // old_queries last_cleaned queries pubkey subwallet_id message mode shift value'' value'
        NEWC STSLICE STONE STSLICE                             // old_queries last_cleaned queries pubkey subwallet_id message mode shift value_builder
    }>ELSE<{                                                   // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number
        NEWC OVER STZEROES STONE                               // old_queries last_cleaned queries pubkey subwallet_id message mode shift bit_number value_builder
        10 PUSHPOW2DEC ROT SUB DEC STZEROES                    // old_queries last_cleaned queries pubkey subwallet_id message mode shift value_builder
    }>

    ACCEPT

    ENDC                                                       // old_queries last_cleaned queries pubkey subwallet_id message mode shift value_cell
    s0 s1 s6 XCHG3                                             // old_queries last_cleaned mode pubkey subwallet_id message value_cell shift queries
    14 INT DICTUSETREF                                         // old_queries last_cleaned mode pubkey subwallet_id message queries

    // build storage
    s4 s5 XCHG                                                 // old_queries mode last_cleaned pubkey subwallet_id message queries
    s6 s6 s3 XCHG3                                             // message mode last_cleaned queries old_queries subwallet_id pubkey
    NEWC 256 STU 32 STU STDICT STDICT 40 STU ENDC              // message mode c4
    c4 POP                                                     // message mode

    COMMIT

    OVER CTOS                                                  // message mode message_slice

    b{0} SDBEGINS 3 LDU                                        // message mode flags message_slice'
    LDMSGADDR LDMSGADDR                                        // message mode flags src dest message_slice'
    LDGRAMS SKIPOPTREF                                         // message mode flags src dest value message_slice'
    LDGRAMS LDGRAMS 64 32 + LDU                                // message mode flags src dest value ihr_fee fwd_fee created_lt+created_at message_slice'
    b{0} SDBEGINS 1 LDI SWAP                                   // message mode flags src dest value ihr_fee fwd_fee created_lt+created_at message_slice' body_in_ref?
    IF:<{
      LDREF ENDS                                               // message mode flags src dest value ihr_fee fwd_fee created_lt+created_at body_ref
    }>                                                         // message mode flags src dest value ihr_fee fwd_fee created_lt+created_at (body | body_ref)
    6 BLKDROP                                                  // message mode flags src
    DUP b{00} PUSHSLICE SDEQ                                   // message mode flags src f(src==addr_none)
    SWAP MYADDR SDEQ                                           // message mode flags f(src==addr_none) f(src==my_addr)
    OR IFNOTRET                                                // message mode flags
    1 INT AND IFRET                                            // message mode

    // send message
    2 INT OR                                                   // message mode|2
    SENDRAWMSG
}>c
